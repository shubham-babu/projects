type Query {
    user(id: ID!): User
    users: [User]
}

type Mutation {
    createUser(input: CreateUserInput!): User
    updateUser(id: ID!, input: UpdateUserInput!): User
    deleteUser(id: ID!): User
    login(email: String!, password: String!): AuthPayload
}

type AuthPayload {
  token: String
  user: User
}

interface User {
    id: ID!
    name: String!
    password: String
}

type UserWithEmail implements User{
    id: ID!
    name: String!
    password: String
    email: String!
}

type UserWithPhone implements User{
    id: ID!
    name: String!
    password: String
    phone: String!
}

input CreateUserInput {
    name: String
    email: String
    phone: String
    password: String
}

input UpdateUserInput {
    name: String
    email: String
    phone: String
}

type Pagination {
    total: Int
    scroll_id: Int
    _size: Int
}

# Path: demo-project/src/user/user.resolver.ts